// TODO: concepts wit different colors
colorArr = ["201923","ffffff","fcff5d","7dfc00","0ec434","228c68","8ad8e8","235b54","29bdab","3998f5","37294f","277da7","3750db","f22020","991919","ffcba5","e68f66","c56133","96341c","632819","ffc413","f47a22","2f2aa0","b732cc","772b9d","f07cab","d30b94","edeff3","c3a5b4","946aa2","5d4c86",]

var style = document.createElement('style');
style.type = 'text/css';

var ontologyData = ''

var classesArr = []
var dataArr = []
var objectArr = []

function classes(link, concept, cssClass, subClassOf, comment, label) {
  this.link = link;
  this.concept = concept;
  this.cssClass = cssClass;
  this.subClassOf = subClassOf;
  this.comment = comment;
  this.label = label;
}

function dataProps(link, prop, subPropertyOf, domain, range, comment, label, seeAlso) {
  this.link = link;
  this.prop = prop;
  this.subPropertyOf = subPropertyOf;
  this.domain = domain;
  this.range = range;
  this.comment = comment;
  this.label = label;
  this.seeAlso = seeAlso;
}

function objectProps(link, prop, subPropertyOf, domain, range, comment, label) {
  this.link = link;
  this.prop = prop;
  this.subPropertyOf = subPropertyOf;
  this.domain = domain;
  this.range = range;
  this.comment = comment;
  this.label = label;
}

var convoCells = [{}]
var nodeCells = [{}]
var convo = [{}]


$(function() {
  $('#ontologyUpload').click(function() {
    if($("#file").val() != ""){
      var form_data = new FormData($('#uploadFile')[0]);
      $.ajax({
          type: 'POST',
          url: '/uploadOntology',
          data: form_data,
          contentType: false,
          cache: false,
          processData: false,
          success: function(data) {
            console.log('Ontology was uploaded successfully');
            
            et_al = data.results;

            _('allConceptors').innerHTML.replace('Check back after uploading ontology', '')

            ontologyData = et_al

            ontSource = data.results
            ontSource = ontSource.replaceAll("<", "&lt;")
            ontSource = ontSource.replaceAll(">", "&lt;")
            ontSource = ontSource.replaceAll("&", "&amp;")
            ontSource = ontSource.replaceAll("\n", "<br />")
            _('viewOnt').innerHTML += ontSource

            class_section = et_al.split("#    Classes")[1];
            class_section = class_section.split("#################################################################")[1];
            class_section = class_section.split("#################################################################")[0];
            class_section = class_section.split("###  Generated by the OWL API")[0];
            class_section = class_section.split("\n\n");

            data_section = et_al.split("#    Data")[1];
            data_section = data_section.split("#################################################################")[1];
            data_section = data_section.split("#################################################################")[0];
            data_section = data_section.split("\n\n");

            object_section = et_al.split("#    Object")[1];
            object_section = object_section.split("#################################################################")[1];
            object_section = object_section.split("#################################################################")[0];
            object_section = object_section.split("\n\n");

            /*
            if(et_al.indexOf("#    Annotation") != -1){
              anno_section = et_al.split("#    Annotation")[1];
              anno_section = anno_section.split("#################################################################")[1];
              anno_section = anno_section.split("#################################################################")[0];
              anno_section = anno_section.split("\n\n\n");

              
              for (let i = 1; i < anno_section.length - 1; i++) {
                anno_section[i] = anno_section[i].replace("###  ", "");

                annoArr[i] = new annoProps();
                //link
                annoArr[i].link = anno_section[i].split("\n")[0];
                if(annoArr[i].link == undefined){
                  anno_section[i] = anno_section[i].replace("\n", "");
                  annoArr[i].link = anno_section[i].split("\n")[0];
                }

                annoArr[i].prop = anno_section[i].split("\n")[1];
                if(annoArr[i].prop != undefined){
                  annoArr[i].prop = annoArr[i].prop.split(" ")[0];
                  annoArr[i].prop = annoArr[i].prop.replace("wotdl:", "");
                }else{
                  anno_section.splice(i, 1);
                }
              

              
                console.log(i + " :" + annoArr[i].link)
                console.log(i + " :" + annoArr[i].prop)
              }
            }
            */

            for (let i = 1; i < class_section.length - 1; i++) {
              class_section[i] = class_section[i].replace("###  ", "");

              classesArr[i] = new classes();
              
              //link
              classesArr[i].link = class_section[i].split("\n")[0];
              if(classesArr[i].link == ""){
                class_section[i] = class_section[i].replace("\n", "");
                classesArr[i].link = class_section[i].split("\n")[0];
              }

              classesArr[i].concept = class_section[i].split("\n")[1];
              if(classesArr[i].concept != undefined){
                classesArr[i].concept = classesArr[i].concept.split(" ")[0];
                classesArr[i].cssClass = classesArr[i].concept.replace("wotdl:", "");
                classesArr[i].cssClass = classesArr[i].cssClass.replace('sosa:', "")
                classesArr[i].cssClass = classesArr[i].cssClass.replace('ssn:', "")
              }else{
                class_section.splice(i, 1);
              }

              //style
              style.innerHTML += '.' + classesArr[i].cssClass +'{ border-left: 10px groove ' + '#' + colorArr[i] + '; }';

              for (let j = 1; j <= 3; j++) {

                more = class_section[i].split(";\n")[j];
                if(more != undefined){
                  if(more.indexOf("rdfs:subClassOf") != -1){
                    subClassOf = more.split('rdfs:subClassOf ')[1].replace(/ /g,'');
                    subClassOf = subClassOf.replace(',\n', " ");
                    classesArr[i].subClassOf = subClassOf
                  }else if(more.indexOf("rdfs:comment") != -1){
                    comment = more.split('rdfs:comment "')[1];
                    comment = comment.split('"')[0];
                    classesArr[i].comment = comment
                  }else if(more.indexOf("rdfs:label") != -1){
                    label = more.split('rdfs:label "')[1];
                    label = label.split('"')[0];
                    classesArr[i].label = label
                  }
                }
              }
              
            }


            for (let i = 1; i < data_section.length - 1; i++) {
              data_section[i] = data_section[i].replace("###  ", "");

              dataArr[i] = new dataProps();
              
              //link
              dataArr[i].link = data_section[i].split("\n")[0];
              if(dataArr[i].link == ""){
                data_section[i] = data_section[i].replace("\n", "");
                dataArr[i].link = data_section[i].split("\n")[0];
              }
              
              dataArr[i].prop = data_section[i].split("\n")[1];
              if(dataArr[i].prop != undefined){
                dataArr[i].prop = dataArr[i].prop.split(" ")[0];
                dataArr[i].prop = dataArr[i].prop.replace("wotdl:", "");
              }else{
                class_section.splice(i, 1);
              }

              
              for (let j = 1; j <= 5; j++) {

                more = data_section[i].split(";\n")[j];
                if(more != undefined){
                  if(more.indexOf("rdfs:subPropertyOf") != -1){
                    subPropertyOf = more.split('rdfs:subPropertyOf ')[1].replace(/ /g,'');
                    subPropertyOf = subPropertyOf.replace(',\n', " ");
                    subPropertyOf = subPropertyOf.replace(',', " ");
                    dataArr[i].subPropertyOf = subPropertyOf
                  }else if(more.indexOf("rdfs:domain") != -1){
                    domain = more.split('rdfs:domain ')[1].replace(/ /g,'');
                    domain = domain.replace(',\n', " ");
                    domain = domain.replace(',', " ");
                    dataArr[i].domain = domain
                  }else if(more.indexOf("rdfs:range") != -1){
                    range = more.split('rdfs:range ')[1].replace(/ /g,'');
                    range = range.replace(',\n', " ");
                    range = range.replace(',', " ");
                    dataArr[i].range = range
                  }else if(more.indexOf("rdfs:comment") != -1){
                    comment = more.split('rdfs:comment "')[1];
                    comment = comment.split('"')[0];
                    dataArr[i].comment = comment
                  }else if(more.indexOf("rdfs:label") != -1){
                    label = more.split('rdfs:label "')[1];
                    label = label.split('"')[0];
                    dataArr[i].label = label
                  }else if(more.indexOf("rdfs:seeAlso") != -1){
                    seeAlso = more.split('rdfs:seeAlso "')[1];
                    seeAlso = seeAlso.split('"')[0];
                    dataArr[i].seeAlso = seeAlso
                  }
                }
              }
            }
            
            for (let i = 1; i < object_section.length - 1; i++) {
              object_section[i] = object_section[i].replace("###  ", "");

              objectArr[i] = new objectProps();
              
              //link
              objectArr[i].link = object_section[i].split("\n")[0];
              if(objectArr[i].link == ""){
                object_section[i] = object_section[i].replace("\n", "");
                objectArr[i].link = object_section[i].split("\n")[0];
              }
              
              objectArr[i].prop = object_section[i].split("\n")[1];
              if(objectArr[i].prop != undefined){
                objectArr[i].prop = objectArr[i].prop.split(" ")[0];
                objectArr[i].prop = objectArr[i].prop.replace("wotdl:", "");
              }else{
                class_section.splice(i, 1);
              }

              
              for (let j = 1; j <= 5; j++) {

                more = object_section[i].split(";\n")[j];
                if(more != undefined){
                  if(more.indexOf("rdfs:subPropertyOf") != -1){
                    subPropertyOf = more.split('rdfs:subPropertyOf ')[1].replace(/ /g,'');
                    subPropertyOf = subPropertyOf.replace(',\n', " ");
                    subPropertyOf = subPropertyOf.replace(',', " ");
                    objectArr[i].subPropertyOf = subPropertyOf
                  }else if(more.indexOf("rdfs:domain") != -1){
                    domain = more.split('rdfs:domain ')[1].replace(/ /g,'');
                    domain = domain.replace(',\n', " ");
                    domain = domain.replace(',', " ");
                    objectArr[i].domain = domain
                  }else if(more.indexOf("rdfs:range") != -1){
                    range = more.split('rdfs:range ')[1].replace(/ /g,'');
                    range = range.replace(',\n', " ");
                    range = range.replace(',', " ");
                    objectArr[i].range = range
                  }else if(more.indexOf("rdfs:comment") != -1){
                    comment = more.split('rdfs:comment "')[1];
                    comment = comment.split('"')[0];
                    objectArr[i].comment = comment
                  }else if(more.indexOf("rdfs:label") != -1){
                    label = more.split('rdfs:label "')[1];
                    label = label.split('"')[0];
                    objectArr[i].label = label
                  }
                }
              }
              
              //console.log(i + ' ' + objectArr[i].label + ' from ' +objectArr[i].domain + ' to ' +objectArr[i].range)
            }

            for(i = 1; i < classesArr.length ; i ++){
              if(classesArr[i].concept){
                conceptClass = classesArr[i].concept
                conceptLabel = classesArr[i].label
                if(classesArr[i].label == undefined){
                  conceptLabel = conceptClass
                }
                conceptComment = ""
                if(classesArr[i].comment){
                  conceptComment = "<span title='" + classesArr[i].comment + "'>&nbsp;&nbsp;&nbsp;&nbsp;i</span>"
                }
              }
              
              

              x = "<table class='" + classesArr[i].cssClass + "' style='width: 97%; background: rgba(0,0,0,0.2); margin:10px; height: 100px'><tr><td style='width: 20%; padding: 10px;'>" + conceptLabel + "</td><td style='padding: 10px; font-weight:bold;'>" + classesArr[i].comment +"</td></tr></table>"

              
              
              var z = "<table id='convoCells_" + classesArr[i].cssClass + "'"
              if (classesArr[i].concept == "wotdl:CompositeDevice" || classesArr[i].concept == "sosa:CompositeDevice" || classesArr[i].concept == "ssn:CompositeDevice"){
                z += " title='#0000' "
              }
              z += ">";
              z += "<tbody><tr><td class='title center'>Describe device</td></tr>"
              z += "<tr><td class='sub-title capitalize' class='" + classesArr[i].cssClass + "'>" + classesArr[i].label + " <div class='hoverer' title='" + classesArr[i].comment + "'>i</div></td></tr>"
              z += "<tr><td>"
              z += "    <fieldset>"
              z += "        <legend> Data Properties </legend>" //TODO: change title
              z += "        <input type='text' class='inputer d-b' placeholder='name' onchange="+ '"'+ "updateField(this, 'data')"+ '"'+ " > <span class='d-n color-r font-s'>can not be empty or contain special characters</span>"

              for(j = 1; j < dataArr.length; j ++){
                if(dataArr[j].domain){

                  
                  dataDomain = dataArr[j].domain
                  dataProp = dataArr[j].prop
                  dataComment = dataArr[j].comment
                  
                  
                  dataLabel = dataArr[j].label
                  if(dataArr[j].label == undefined){
                    dataLabel = dataProp
                  }
                 
                   range = dataArr[j].range

                  if(range == undefined){
                    range = 'range'
                  }

                  if (range.indexOf('xsd:positiveInteger') != -1){
                    type = "type='number' min='0.000000' step='0.01' "
                  }else if (range.indexOf('xsd:double') != -1 || range.indexOf('xsd:decimal') != -1 || range.indexOf('xsd:float') != -1){
                    type = "type='number' step='any' "
                  }else{
                    type = "type='text' "
                  }

                  if(dataDomain.indexOf(conceptClass) != -1 && dataLabel != "name"){
                    z +=           "<input " + type + " class='inputer d-b' title='" + dataComment + "' size='20' placeholder='" + dataLabel + "' class='conceptInput1' onchange="+ '"'+ "updateField(this, 'data')"+ '"'+ " > <span class='d-n color-r font-s'>can not be empty or contain special characters</span>"
                  }
                }
              }

              z += "    </fieldset>"
              z += "</td></tr>"
              z += "<tr><td>"
                var objAndDataPropsCounter = 0
                var objPropsCounted = 0
              for(j = 1; j < objectArr.length; j ++){
                if(objectArr[j].domain){
                  objectDomain = objectArr[j].domain
                  if (objectDomain.indexOf(conceptClass) != -1){
                    objAndDataPropsCounter ++
                  }
                }
              }
              for(j = 1; j < classesArr.length; j ++){
                if(classesArr[j].subClassOf){
                  subClasses = classesArr[j].subClassOf
                  if (subClasses.indexOf(conceptClass) != -1){
                    objPropsCounted ++
                    objAndDataPropsCounter ++
                  }
                }
              }

              if(objAndDataPropsCounter > 0) {
                z += "    <fieldset>"
                z += "        <legend> Object properties </legend>" //TODO: change title

                objectPropsCount = 0
                for(j = 1; j < objectArr.length; j ++){
                  if(objectArr[j].domain){

                    objectDomain = objectArr[j].domain
                    objectLink = objectArr[j].link
                    subRange = objectArr[j].range
                    subProp = objectArr[j].prop
                    subComment = objectArr[j].comment
                    
                    subRange = subRange.replace("wotdl:", "");
                    subRange = subRange.replace('sosa:', "")
                    subRange = subRange.replace('ssn:', "")
                    
                    tabelClass = objectDomain.replace(':', "")

                    if (objectDomain.indexOf(conceptClass) != -1){
                      
                      z += "        <div class='mt-20 " + subRange + "'>" //TODO: add a comment here for the user
                      z += "            <div id='buttoner' onclick="+ '"' +"has_(this, '"+ subRange + "', 'convoADD')"+ '"'+ ">Add " + subRange + "</div> <div class='hoverer' title='" + subComment + "'>i</div>"
                      z += "            <div class='d-n'>"
                      z += "                <input type='text' name='" + subProp + "' class='inputer d-ib' placeholder='name of " + subRange + "' onchange="+ '"'+ "updateField(this, '')"+ '"'+ " >"
                      z += "                <div " + j + " id='buttoner' class='d-ib' onclick="+ '"' +"has_(this, '" + subRange + "', 'convo')"+ '"'+ ">describe " + subRange + "</div> <span class='d-n color-r font-s'>can not be empty or contain special characters</span>"
                      z += "            </div>"
                      z += "        </div>"
                    }
                  }
                }
                
                if(objPropsCounted == 1){
                  view = ""
                }else if(objPropsCounted > 1){
                  view = " d-n "
                
                    z += "<select name='cars' id='cars' class='buttoner mt-50' onchange="+ '"'+ "selectObjectProp(this)"+ '"'+ ">"
                    z += "    <option value='xxx'>Select Object Property</option>"
                    
                    for(j = 1; j < classesArr.length; j ++){
                      if(classesArr[j].subClassOf){
                        subClasses = classesArr[j].subClassOf
                        if (subClasses.indexOf(conceptClass) != -1){
                          for(j = 1; j < classesArr.length; j ++){
                            if(classesArr[j].subClassOf){
                              subClasses = classesArr[j].subClassOf
                              subConcept =  classesArr[j].cssClass 
                              if (subClasses.indexOf(conceptClass) != -1){
                                z += "    <option value='"+ subConcept +"'>"+ subConcept +"</option>"
                              }
                            }
                          }
                        }
                      }
                    }
                      
                  z += "</select>"
                }

                
                function selectObjectProp(x){
                  console.log("selectObjectProp", x)

                }

                for(j = 1; j < classesArr.length; j ++){
                  if(classesArr[j].subClassOf){

                    subClasses = classesArr[j].subClassOf
                    subConcept =  classesArr[j].cssClass 
                    subComment = classesArr[j].comment
                    
                    subRange = subRange.replace("wotdl:", "")
                    subRange = subRange.replace('sosa:', "")
                    subRange = subRange.replace('ssn:', "")

                    

                    if (subClasses.indexOf(conceptClass) != -1){
                            
                      z += "        <div subsub class='mt-20 " + view + subConcept + "'>" //TODO: add a comment here for the user
                      z += "            <div id='buttoner'>" + subConcept + "</div> <div class='hoverer' title='" + subComment + "'>i</div>"

                      for(p = 1; p < classesArr.length ; p ++){
                        if(classesArr[p].cssClass == subConcept){
                        
                          for(q = 1; q < dataArr.length; q ++){
                            if(dataArr[q].domain){

                              dataDomain = dataArr[q].domain
                              dataProp = dataArr[q].prop
                              dataComment = dataArr[q].comment
                              dataSeeAlso = dataArr[q].seeAlso
                              

                              dataLabel = dataArr[q].label
                              if(dataArr[q].label == undefined){
                                dataLabel = dataProp
                              }
                            
                              range = dataArr[q].range

                              if(range == undefined){
                                range = 'range'
                              }

                              if (range.indexOf('xsd:positiveInteger') != -1){
                                type = "type='number' min='0.000000' step='0.01' "
                              }else if (range.indexOf('xsd:double') != -1 || range.indexOf('xsd:decimal') != -1 || range.indexOf('xsd:float') != -1){
                                type = "type='number' step='any' "
                              }else{
                                type = "type='text' "
                              }

                              if(dataDomain.indexOf(subConcept) != -1){
                                
                                if(dataSeeAlso){
                                  z +=      "<textarea rows='15' " + type + " class='inputer2 d-b' title='" + dataComment + "' size='20' placeholder='" + dataLabel + "\n\ndescription: Optional description in *Markdown*\nrequired: true\ncontent:\n  application/json: \n    schema:\n..." + "' class='conceptInput1' onchange="+ '"'+ "updateField(this, 'data3')"+ '"'+ " ></textarea> <span class='d-n color-r font-s'>can not be empty or contain special characters</span> "
                                  
                                  z += " <a href='" + dataSeeAlso + "' target='_blank'><div class='hoverer2' title='" + dataSeeAlso + "'> click to be redirected for hint &#128279;  </div></a>"
                                }else{
                                  z +=      "<input " + type + " class='inputer d-b' title='" + dataComment + "' size='20' placeholder='" + dataLabel + "' class='conceptInput1' onchange="+ '"'+ "updateField(this, 'data3')"+ '"'+ " > <span class='d-n color-r font-s'>can not be empty or contain special characters</span> "
                                }
                              }
                            }
                          }
                        }
                      }

                      z += "        </div>"

                    }
                  }
                }
                
                z += "    </fieldset>"
              }

              z += "</td></tr></tbody>"
              z += "</table>"
              

              if (classesArr[i].concept == "wotdl:CompositeDevice" || classesArr[i].concept == "sosa:CompositeDevice" || classesArr[i].concept == "ssn:CompositeDevice"){
                page[3] = z;
                uploadSuccessful();
                convo[0] = { code:'#0000', name: 'compositeDevice', tags: z, parent: '',}
              }

              $("#allConceptors").append(x);
              if(classesArr[i].label != undefined){
                convoCells[i] = { name : [classesArr[i].cssClass], tags : z }
              }
              nodeCells[i] = { name : [classesArr[i].cssClass], tags : x }
            }
            //console.log('xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx ' + JSON.stringify(convoCells))
            //style
            document.getElementsByTagName('head')[0].appendChild(style);

            $("#terminalDIVcontent").text(et_al);
          },
      });
      
      console.log('Genau')
    }else{
      $("#terminalDIVcontent").text("Please select an ontology to upload");
    };
  });
});


                
function selectObjectProp(x){

  option = 1
  for(i = 3; i < x.parentElement.children.length; i ++) {
    x.parentElement.children[i].className = "mt-20  d-n " + x.options[option].text

    if(x.parentElement.children[i].innerHTML.indexOf(x.value) != -1) {
      x.parentElement.children[i].className = "mt-20  d-b " + x.options[option].text
    }
    option ++
    console.log(x.parentElement.children[i].className)
  }
}

function htmlEnc(s) {
  return s.replace(/&/g, '&amp;')
  .replace(/</g, '&lt;')
  .replace(/>/g, '&gt;')
  .replace(/'/g, '&#39;')
  .replace(/"/g, '&#34;');
}

function onlyLettersAndNumbers(str) {
  return /^[A-Za-z0-9_]*$/.test(str);
}
    
// TODO: update the name of concept
function updateField(x, xx){

  if (onlyLettersAndNumbers(x.value) || xx === 'data3'){
    
    if(x.parentElement.tagName != "FIELDSET" && xx == 'data3'){
      x.nextElementSibling.className = 'd-n color-r font-s'
    }else if(x.parentElement.tagName != "FIELDSET"){
      x.nextElementSibling.nextElementSibling.className = 'd-n color-r font-s'
    }else{
      x.nextElementSibling.className = 'd-n color-r font-s'
    }
    
    x.style.border = 'none'

    if(xx === 'data'){
      xTags = x.parentElement.parentElement.parentElement.parentElement.parentElement.outerHTML
      xTitle = x.parentElement.parentElement.parentElement.parentElement.parentElement.title
    }else if(xx === 'data2'){
      xTags = x.parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.outerHTML
      xTitle = x.parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.title
    }else if(xx === 'data3'){
      xTags = x.parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.outerHTML
      xTitle = x.parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.title
    }else{
      xTags = x.parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.outerHTML
      xTitle = x.parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.title
    }
    current = x.outerHTML
    if(current.indexOf('value') > -1){
      current = current.replace('value', '')
    }

    xNew = current.replace('">', '" value="'+ x.value +'">')
    
    xTag = xTags.replace(x.outerHTML, xNew)

    for (const key in convo) {
      if(convo[key].code == xTitle){
        convo[key].tags = xTag
      }
    }
    naver(xTitle)
    x.focus()
  }else{
    if(x.parentElement.children.length == 3 && x.nextElementSibling.nextElementSibling.innerHTML == "can not be empty or contain special characters"){
      x.nextElementSibling.nextElementSibling.className = 'd-ib color-r font-s'
    }else{
      x.nextElementSibling.className = 'd-ib color-r font-s'
    }
    x.style.borderBottom = '5px solid red'
  }
}

//open and close submenus
function concept_menu(x){
  menu_tr = x.parentElement;
  menu_tt = menu_tr.parentElement
  menu_table = menu_tt.parentElement

  if(menu_table.children[0].children[1].children[0].children[0].style.display == "inline-block"){
    menu_table.children[0].children[1].children[0].children[0].style.display ="none"
  }else{
    menu_table.children[0].children[1].children[0].children[0].style.display ="inline-block"
    menu_table.children[0].children[1].children[0].children[0].style.width ="100%"
  }
}
 
function passMeAUniqueIndexFam() {
  let indexDb = "1000";
  let x = Math.floor(Math.random() * (1000) + 1000);
  const indexDbArray = indexDb.split(x);
  if( indexDbArray.length > 1 ){
    passMeAUniqueIndexFam()
  }else{
    indexDb += " " + x + " ";
  }

  return x;
}

function remove(x){
  x.remove();
}

//insert element under particular element
function has_(x, xx, xxx){
  if(xxx == 'convoADD'){
    newX = x.nextElementSibling.nextElementSibling.cloneNode(true)
    newX.className = 'd-b';
    newX.children[0].title = newX.children[1].title = newX.title = '#' + passMeAUniqueIndexFam()
    
    x.parentElement.innerHTML += newX.outerHTML
  }else if(xxx == 'node') {
    menu_td = x.parentElement;
    menu_tr = menu_td.parentElement;
    menu_tt = menu_tr.parentElement;
    menu_tb = menu_tt.parentElement;
    menu_table = menu_tb.parentElement;
    thisConcept = menu_table.outerHTML;
    
    //TODO:  hide menu
    x.parentElement.parentElement.style.display = "none"

    //getting this.left margin
    parentMargin = x.parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.style.marginLeft;

    UniqueIndex = passMeAUniqueIndexFam();

    //assign title <x></x>
    __(xx)[__(xx).length - 1].title = __(xx)[__(xx).length - 1].title.split(" ")[0]
    __(xx)[__(xx).length - 1].title +=  " #" + UniqueIndex;

    const concepts = _('concepts').innerHTML.split(x.parentElement.parentElement.parentElement.parentElement.parentElement.outerHTML);
    _('concepts').innerHTML = concepts[0] + thisConcept + __(xx)[__(xx).length - 1].outerHTML + concepts[1];

    //adding left margin for child
    marginForChild = 0;
    for(i=0; i < __(xx).length; i++){
      if(__(xx)[i].title.indexOf(UniqueIndex) && marginForChild == 0){
        __(xx)[i].style.marginLeft = (parentMargin.split("px")[0] * 1) + 50 + "px";
        marginForChild ++;
      }
    }

    if(concepts.length > 1){
      for(i=2; i < concepts.length; i++){
        _('concepts').innerHTML += concepts[i] + menu_table.outerHTML;
      }
    }
  }else if(xxx == 'convo'){
    if(x.previousElementSibling.value == '' || onlyLettersAndNumbers(x.previousElementSibling.value) === false){
      x.previousElementSibling.style.borderBottom = '5px solid red'
      x.nextElementSibling.className = 'd-ib color-r font-s'
    }else{
      x.previousElementSibling.style.border = 'none'
      x.nextElementSibling.className = 'd-n color-r font-s'
      
      //convo[0] = { '#0000' : 'compositeDevice'};

      //get the index of current element
      indexer = x.parentElement.title
      namer = x.previousElementSibling.value
      parentIndexer = x.parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.title
      inConvo = 0
      itExist = false
      
      for (const key in convo) {
        if(convo[key].code == indexer){inConvo ++}
      }

      itExist = false
      while(inConvo == 0 && itExist == false){
        for (const key in convoCells) {
          

          while(convoCells[key].name == xx && itExist == false){
            tagger = convoCells[key].tags.replace("><tbody>", " title='"+ indexer +"'><tbody>")
            
            convo[convo.length] = { code: indexer, name: namer, tags: tagger, parent: parentIndexer,}
            itExist = true
          }
        }
      }
      
      if(parentIndexer != '#0000' && 1 != 1){
        for (const key in convo) {
          if(convo[key].code == '#0000'){
            _('naver').innerHTML = " <div id='buttoner' class='mt-20' onclick='naver(" + '"' + convo[key].code + '"' + ", " + '"xx"' + ", 1)'>&#10096;&#10096; " + convo[key].name +"</div> "
          }
        }
      }
      if(indexer != '#0000'){
        _('naver').innerHTML = " <div id='buttoner' class='mt-20' onclick='naver(" + '"#0000"' + ", 1)'>&#10096;&#10096; Composite Device</div> "
      }

      //update parent.tag
      for (const key in convo) {

        if(convo[key].code == parentIndexer && parentIndexer != '#0000'){
          //_('naver').innerHTML += " <div id='buttoner' class='mt-20' onclick='naver(" + '"' + convo[key].code + '"' + ", " + '"xx"' + ")'>&#10096;&#10096; " + convo[key].name +"</div> "
          convo[key].tags = x.parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.parentElement.outerHTML
        }
      }

      // nav button(s)
      for (const key in convo) {
        
        if(convo[key].code == indexer){
          taggers = convo[key].tags
          convo[key].tags = taggers.replace('placeholder', 'value="'+ namer + '" placeholder');

          page[3] = convo[key].tags
          pager(3)
        }
      }
    }
  }
  
}

function naver(x, xx){
  if(xx){
    coded = _('wizard_bodyx').children[0].title
    tagged = _('wizard_bodyx').children[0].outerHTML
    
    for (const key in convo) {
      if(convo[key].code == coded){
        convo[key].tags = tagged
      }
    }
  }

  for (const key in convo) {
    if(convo[key].code == x){
      page[3] = convo[key].tags
      pager(3)
    }
  }
  if(xx){
    remove(_('naver').lastChild)
  }
}
  
fluidiy()
  
  
  
  
window.addEventListener("load", () =>{
    fluidiy();
});
  
window.addEventListener("resize", () =>{
    fluidiy();
    turnOffSplash()
});

function fluidiy(){

    _('splash').style.width = window.innerWidth + "px";    
    _('splash').style.height = window.innerHeight + "px";

    document.body.style.width = window.innerWidth + "px";  
  
}

var count
myInterval = setInterval(terminalAutoScroll, 200);
function terminalAutoScroll(){
  
}
var count
myInterval = setInterval(terminalAutoScroll, 100);
function terminalAutoScroll(){
  
}

function turnOffSplash(){
    _('splash').style.display = "none"
}

let text = "Web of Things (WoT) was proposed by the World Wide Web Consortium (W3C). The idea is to enable Internet of Things (IoT) harness the already existing web infrastructure. This was done to make IoT more robust and more importantly to aid interoperability, which was becoming an issue due to the ever-growing number of smart devices in IoT. Interoperability is achieved by describing these devices. Describing their properties in a human-and-machine readable form, actions can be read, written, and interpreted to show the state of the device. Some of these WoT descriptions include W3C’s Thing Description, Web of Things Asset Description (WoT-AD) and Web of Things Description Language (WoTDL).";
text = text.repeat(7);
const newText = text.split(" ");
const fontSizes = [ "10px", "12px", "14px", "16px", "18px", "20px", "22px", "24px", "28px", "34px", "40px" ];

/*for (var i = 0; i < newText.length; i++) {
  sizer = "6px";//fontSizes[Math.floor(Math.random() * fontSizes.length)]
  let xx = "<span style='font-size:" + sizer + "'>" + newText[i] + "</span>"
  _("splashText").innerHTML += xx + " ";
}*/
var counter = 0;
var myVar = setInterval(function(){ 
    if (counter < newText.length)
    {
      _("splashText").innerHTML += newText[counter] + " ";
      counter++;
    }else{
      clearInterval(myVar);
    }
}, 5);

let mySplash = setInterval(mySplashTimer, 5000);
function mySplashTimer() {
  turnOffSplash();
  clearInterval(mySplash);
  pager(1);
}


function pager(x){
  if(x == 22){
    _('wizard_footer').style.textAlign = "right";
    _('wizard_footer').innerHTML = footer[x]
  }
  if(x == 2){
    _('hidden').style.display = 'inline-block';
    _('wizard_bodyx').innerHTML  = ""
    _('wizard_footer').innerHTML = " "
    _('wizard_footer').style.background = "none";
  }else if(x == 3){
    pagination = x
    _('wizard_bodyx').innerHTML  = page[x]
    _('hidden').style.display = 'none';
    _('wizard_footer').innerHTML = "<div id='buttoner' onclick='generateDescription()' class='mt-20' onclick=''> Generate Description </div>"
    _('wizard_footer').style.background = "rgba(0,0,0,0.1)";
  }else if(x > 0 && x < 10 && x != 3){
    pagination = x
    _('wizard_bodyx').innerHTML  = page[x]
    _('wizard_footer').innerHTML = footer[x]
    _('hidden').style.display = 'none';
  }
  if(x == 1 || x == 3){
    _('wizard_footer').style.textAlign = "center";
    //console.log("ain't God good " + classesArr[1].concept)
  }
  if(x == 0){
    _('wizard_bodyx').innerHTML = " "
    _('wizard_footer').innerHTML = " "
  }
  if(x == 13){
    if(_('tester').style.display == "inline-block"){
      _('tester').style.display ="none"
    }else{
      _('tester').style.display ="inline-block"
    }
  }
  if(x == 12){
    if(_('allConceptors').style.display == "inline-block"){
      _('allConceptors').style.display ="none"
    }else{
      _('allConceptors').style.display ="inline-block"
    }
  }else if(x == 11){
    if(_('viewOnt').style.display == "inline-block"){
      _('viewOnt').style.display ="none"
    }else{
      _('viewOnt').style.display ="inline-block"

                                      
                                        for (const key in convo) {
                                      
                                            tag = convo[key].tags
                                            tags = $(tag);
                                            
                                            nameX = tags[0].children[0].children[2].children[0].children[0].children[1].value
                                            conceptX = tags[0].children[0].children[1].children[0].innerHTML
                                            conceptX = conceptX.replace(/\w\S*/g, (w) => (w.replace(/^\w/, (c) => c.toUpperCase())));
                                            conceptX = conceptX.replace(' ', '')
                                      
                                      
                                            gen += "\n" + "<#" + nameX + ">" + "\n"
                                            
                                            
                                            gen += "  a wotdl:" + conceptX + ";" + "\n"
                                      
                                            
                                            for(var i = 1; i < tags[0].children[0].children[3].children[0].children[0].children.length; i++) {
                                              
                                              for(var j = 2; j < tags[0].children[0].children[3].children[0].children[0].children[i].children.length; j++) {
                                      
                                                linkerX = tags[0].children[0].children[3].children[0].children[0].children[i].children[j].children[0].name
                                                valueX = tags[0].children[0].children[3].children[0].children[0].children[i].children[j].children[0].value
                                      
                                                gen += '  wotdl:' + linkerX + ' <#' + valueX + '>' + ";" + "\n"
                                                
                                              }
                                      
                                            }
                                      
                                            if(tags[0].children[0].children[2].children[0].children[0].children[1].value){
                                              gen += '  wotdl:name' + ' "' + tags[0].children[0].children[2].children[0].children[0].children[1].value + '"^^xsd:string' + ";" + "\n"
                                            }
                                      
                                            for(var i = 2; i < tags[0].children[0].children[2].children[0].children[0].children.length; i++) {
                                      
                                              typeX = 'string'
                                              if(tags[0].children[0].children[2].children[0].children[0].children[i].type == 'number'){
                                                typeX = 'decimal'
                                              }
                                              if(tags[0].children[0].children[2].children[0].children[0].children[i].value){
                                                gen += '  wotdl:' + tags[0].children[0].children[2].children[0].children[0].children[i].placeholder.replace(' ', '') + ' "' + tags[0].children[0].children[2].children[0].children[0].children[i].value + '"^^xsd:' + typeX + ";" + "\n"
                                              }
                                            }
                                          
                                        }
                                          function points(a, b){

                                            aw = a.offsetWidth
                                            ah = a.offsetHeight * 0.5
                                            bh = b.offsetHeight * 0.5
                                            x = window.innerWidth * .05
                                            y = window.innerHeight * .05

                                            x1 = a.offsetLeft + aw - x
                                            y1 = a.offsetTop - y + ah

                                            x2 = b.offsetLeft - x
                                            y2 = b.offsetTop - bh

                                            //xx = x1 + ((x2 - x1) /2 ) + 10
                                            //yx = y1 + ((y2 - y1) /2 ) + 10

                                            return "<polyline points='" + x1 + "," + y1 + " " + x2 + "," + y2 + "' style='stroke:rgb(255,255,255);stroke-width:2' />"
                                        }

                                        _('ourSVG').innerHTML += points(_('sss'), _('ttt'));
                                        _('ourSVG').innerHTML += points(_('xxx'), _('yyy'));
    }
  }else if(x == 10){
    if(_('viewNodes').style.display == "inline-block"){
      _('viewNodes').style.display ="none"
    }else{
      _('viewNodes').style.display ="inline-block"
    }
  }
}

$(function() {
  $('#file').change(function() {
    filename = $("#file").val();
    filename = filename.split('\\');
    $("#terminalDIVcontent").text("ontology to be loaded selected - " + filename[2]);
    $("#ontologySelectA").text(filename[2]);
    $("#ontologySelect2A").text("change file");
    _('uplad_status').innerHTML = 'selected';
  });
});

function uploadSuccessful(){
  _('uplad_status').innerHTML = 'uplaod successfully uploaded';
  pager(3)
}

_('wizard_body').style.verticalAlign = "middle";
_('wizard_footer').style.verticalAlign = "middle";
_('wizard_body').style.height = (0.8 * window.innerHeight) - 100 + "px";
_('wizard_body').style.width = (0.8 * window.innerWidth) + "px";
_('hidden').style.width = (0.8 * window.innerWidth) + "px";

var pagination = 0;
var page = [];
var footer = [];
page[1] ="<div id='intro'>IOT DEVICE RDF INSTANCE GENERATOR <div class='font-xs'>(USER-AIDING WEB APPLICATION FOR DESCRIBING WEB OF THINGS DEVICES)<div></div>"
footer[1] ="<div id='continue' onclick='pager(2)'>start</div>"

page[2] = "";
footer[2] ="";
//footer[22] ="<div id='continue' onclick='pager(3)'>continue</div>";

page[3] ="";
footer[3] ="";









//console.log("better days ahead")
// 0300
/*
<table id="convoCells_Effect" title="#1906">
  <tbody>
    <tr>
      <td class="title center">Describe device</td>
    </tr><tr>
      <td class="sub-title capitalize">effect</td>
    </tr><tr>
      <td>
        <fieldset>
          <legend> Data Properties </legend>
          <input type="text" class="inputer d-b" value="sdfsada" placeholder="name" onchange="updateField(this, 'data')">
          <input type="text" class="inputer d-b" title="status" size="20" placeholder="status" onchange="updateField(this, 'data')">
          <input type="number" min="0.000000" step="0.01" class="inputer d-b" title="Time To Effect" size="20" placeholder="Time To Effect" onchange="updateField(this, 'data')">
        </fieldset>
      </td>
    </tr><tr>
      <td>
        <fieldset>
          <legend> Object properties </legend>
          <div class="mt-20 Parameter">
            <div id="buttoner" onclick="has_(this, 'Parameter', 'convoADD')">Add Parameter</div>
            <div class="d-n">
              <input type="text" name="affects" class="inputer d-ib" placeholder="name of Parameter" onchange="updateField(this, '')">
              <div 1="" id="buttoner" class="d-ib" onclick="has_(this, 'Parameter', 'convo')">describe Parameter</div>
            </div>
          </div>
          <div subsub class="mt-20 DecreaseEffect">
            <div id="buttoner" onclick="has_(this, 'DecreaseEffect', 'convoADD')">DecreaseEffect</div>
            <input type="number" step="any" class="inputer d-b" title="Decrement" size="20" placeholder="Decrement" onchange="updateField(this, 'data')">
          </div>
          <div subsub class="mt-20 FixedValueEffect">
            <div id="buttoner" onclick="has_(this, 'FixedValueEffect', 'convoADD')">FixedValueEffect</div>
            <input type="text" class="inputer d-b" title="value" size="20" placeholder="value" onchange="updateField(this, 'data')">
          </div>
          <div subsub class="mt-20 IncreaseEffect">
            <div id="buttoner" onclick="has_(this, 'IncreaseEffect', 'convoADD')">IncreaseEffect</div>
            <input type="number" step="any" class="inputer d-b" title="Increment" size="20" placeholder="Increment" onchange="updateField(this, 'data')">
          </div>
          <div subsub class="mt-20 ToggleEffect">
            <div id="buttoner" onclick="has_(this, 'ToggleEffect', 'convoADD')">Add ToggleEffect</div>
          </div>
        </fieldset>
      </td>
    </tr>
  </tbody>
</table>


<#IncreaseTemperature>
  a wotdl:IncreaseEffect ;
  wotdl:affects <#Temperature> .

  <#SpeedMeasurement>
    a wotdl:HttpRequest , wotdl:Measurement ;
    wotdl:measures <#Speed> ;
    wotdl:httpMethod "GET"^^xsd:string ;
    wotdl:name "get_dc_motor_fan_speed"^^xsd:string ;
    wotdl:url "http://10.0.1.200/fan/1/speed"^^xsd:string .
*/




function generateDescription(){

  gen = '' //+ ontologyData

  coded = _('wizard_bodyx').children[0].title
  tagged = _('wizard_bodyx').children[0].outerHTML
  
  for (const key in convo) {
    if(convo[key].code == coded){
      convo[key].tags = tagged
    }
  }


  gen += "\n" + "\n" + "###  Generated by soft" + "\n"

  for (const key in convo) {

      tag = convo[key].tags
      tags = $(tag);
      
      nameX = tags[0].children[0].children[2].children[0].children[0].children[1].value
      conceptX = tags[0].children[0].children[1].children[0].innerHTML.split("<")[0]
      conceptX = conceptX.replace(/\w\S*/g, (w) => (w.replace(/^\w/, (c) => c.toUpperCase())));
      conceptX = conceptX.replace(' ', '')


      gen += "\n" + "<#" + nameX + ">" + "\n"
      
      
      gen += "  a "

        if(tags[0].children[0].children[3].children[0].hasChildNodes()){
          for(var i = 1; i < tags[0].children[0].children[3].children[0].children[0].children.length; i++) {
            if(tags[0].children[0].children[3].children[0].children[0].children[i].outerHTML.indexOf("subsub") != -1){
              if(tags[0].children[0].children[3].children[0].children[0].children[i].children.length > 2){
                
                if(tags[0].children[0].children[3].children[0].children[0].children[i].children[2].value != ''){
                  gen += "wotdl:" + tags[0].children[0].children[3].children[0].children[0].children[i].children[0].innerHTML + ", "
                }
              }
            }
          }
        }
      

      gen += "wotdl:" + conceptX + " ;\n"
      
    //0300(i1)(j2)0.name
    
    if(tags[0].children[0].children[3].children[0].hasChildNodes()){
      for(var i = 1; i < tags[0].children[0].children[3].children[0].children[0].children.length; i++) {
        
        if(tags[0].children[0].children[3].children[0].children[0].children[i].outerHTML.indexOf("subsub") == -1){console.log('x')
          console.log(tags[0].children[0].children[3].children[0].children[0].children[i].children.length)
          if(tags[0].children[0].children[3].children[0].children[0].children[i].tagName != 'SELECT'){
            if(tags[0].children[0].children[3].children[0].children[0].children[i].children.length > 3){console.log('xx', i)
              x = 0
              y = 0
              for(var j = 3; j < tags[0].children[0].children[3].children[0].children[0].children[i].children.length; j++) {
                if(tags[0].children[0].children[3].children[0].children[0].children[i].children[j].children[0].value){
                  x ++
                }
              }
              if (x){
                gen += '  wotdl:' + tags[0].children[0].children[3].children[0].children[0].children[i].children[2].children[0].name + ' '  
              }
              for(var j = 2; j < tags[0].children[0].children[3].children[0].children[0].children[i].children.length; j++) {
                
                  
                valueX = tags[0].children[0].children[3].children[0].children[0].children[i].children[j].children[0].value
                if(valueX){
                  gen += '<#' + valueX + '>'
  y ++
                }
                
                if(tags[0].children[0].children[3].children[0].children[0].children[i].children[j].nextSibling && tags[0].children[0].children[3].children[0].children[0].children[i].children[j+1].children[0].value && y){ gen += " , " }
              }
              
              if(x){
                gen += ";" + "\n"
              }
            }
          }
        }else{
          if(tags[0].children[0].children[3].children[0].children[0].children[i].hasChildNodes()){
            for(var p = 2; p < tags[0].children[0].children[3].children[0].children[0].children[i].children.length; p++) {
              typeX = 'string'
              if(tags[0].children[0].children[3].children[0].children[0].children[i].children[p].type == 'number'){
                typeX = 'decimal'
              }
              if(tags[0].children[0].children[3].children[0].children[0].children[i].children[p].value){
                gen += '  wotdl:' + tags[0].children[0].children[3].children[0].children[0].children[i].children[p].placeholder.replace(' ', '') + ' "' + tags[0].children[0].children[3].children[0].children[0].children[i].children[p].value + '"^^xsd:' + typeX + ";" + "\n"
              }
            }
          }
        }           
      }
    }
     
    if(tags[0].children[0].children[2].children[0].children[0].children[1].value){
      gen += '  wotdl:name' + ' "' + tags[0].children[0].children[2].children[0].children[0].children[1].value + '"^^xsd:string' + ";" + "\n"
    }

    for(var i = 2; i < tags[0].children[0].children[2].children[0].children[0].children.length; i++) {

      typeX = 'string'
      if(tags[0].children[0].children[2].children[0].children[0].children[i].type == 'number'){
        typeX = 'decimal'
      }
      if(tags[0].children[0].children[2].children[0].children[0].children[i].value){
        gen += '  wotdl:' + tags[0].children[0].children[2].children[0].children[0].children[i].placeholder.replace(' ', '') + ' "' + tags[0].children[0].children[2].children[0].children[0].children[i].value + '"^^xsd:' + typeX + ";" + "\n"
      }
    }
    gen += ' .' 
    
  }
  console.log(gen)
  $.post( "/generate", {
    gen_data: gen
  });
}
